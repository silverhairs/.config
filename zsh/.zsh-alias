alias flutter="fvm flutter"
alias dart="fvm dart"
alias python="python3"
alias pip="pip3"
eval $(thefuck --alias)
alias wtf="fuck"
alias img="kitty +kitten icat"
alias htop="btop"
alias work="nohup kitty --session work.conf & disown"
alias ls="eza --color=always --long --git --no-filesize --icons=always --no-user --no-permissions --no-time --no-user --hyperlink"
alias df="duf"
alias battery="pmset -g batt | grep -Eo '\d+%'"
alias lg="lazygit"
alias uvm="uv run python manage.py"
alias uvr="uv run"
alias ssh="kitty +kitten ssh"

fbat () {
	local file
	file=$(fzf)
	[ -n "$file" ] && bat "$file"
}
function ofd {
  if (( ! $# )); then
    open_command $PWD
  else
    open_command $@
  fi
}

simulator() {
	UDID=$(xcrun simctl list devices | grep -E 'Booted|Shut' | head -n 1 | awk '{print $2}' | tr -d '()')
	if [ -n "$UDID" ]; then
		xcrun simctl boot "$UDID"
		open -a Simulator --args -CurrentDeviceUDID "$UDID"
	else
		echo "No available simulators found."
	fi
}

light () {
	local origin=$(pwd)
	cd ~/.config
	make catppuccin flavor=Latte
	cd "$origin"
	osascript -e 'tell application "System Events" to tell appearance preferences to set dark mode to false'
}

dark () {
	local origin=$(pwd)
	cd ~/.config
	make catppuccin flavor=Mocha
	cd "$origin"
	osascript -e 'tell application "System Events" to tell appearance preferences to set dark mode to true'
}

function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

function open_command() {
  local open_cmd

  # define the open command
  case "$OSTYPE" in
    darwin*)  open_cmd='open' ;;
    cygwin*)  open_cmd='cygstart' ;;
    linux*)   [[ "$(uname -r)" != *icrosoft* ]] && open_cmd='nohup xdg-open' || {
                open_cmd='cmd.exe /c start ""'
                [[ -e "$1" ]] && { 1="$(wslpath -w "${1:a}")" || return 1 }
              } ;;
    msys*)    open_cmd='start ""' ;;
    *)        echo "Platform $OSTYPE not supported"
              return 1
              ;;
  esac

  # If a URL is passed, $BROWSER might be set to a local browser within SSH.
  # See https://github.com/ohmyzsh/ohmyzsh/issues/11098
  if [[ -n "$BROWSER" && "$1" = (http|https)://* ]]; then
    "$BROWSER" "$@"
    return
  fi

  ${=open_cmd} "$@" &>/dev/null
}
